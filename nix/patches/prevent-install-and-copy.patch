diff --git a/auto_cpufreq/core.py b/auto_cpufreq/core.py
index 172a16b..1201191 100755
--- a/auto_cpufreq/core.py
+++ b/auto_cpufreq/core.py
@@ -75,8 +75,8 @@ def current_gov_msg():
 
 # deploy cpufreqctl script
 def cpufreqctl():
-    if not (IS_INSTALLED_WITH_SNAP or os.path.isfile('/usr/local/bin/cpufreqctl.auto-cpufreq')):
-        copy(SCRIPTS_DIR / 'cpufreqctl.sh', '/usr/local/bin/cpufreqctl.auto-cpufreq')
+    #no need to restore
+    pass
 
 # remove cpufreqctl.auto-cpufreq script
 def cpufreqctl_restore():
@@ -84,54 +84,12 @@ def cpufreqctl_restore():
         os.remove('/usr/local/bin/cpufreqctl.auto-cpufreq')
 
 def deploy_daemon():
-    print_header('Deploying auto-cpufreq as a daemon')
-    
-    cpufreqctl() # deploy cpufreqctl script func call
-    set_bluetooth_at_boot(False) # turn off bluetooth on boot
-
-    auto_cpufreq_stats_path.touch(exist_ok=True)
-
-    print('\n* Deploy auto-cpufreq install script')
-    copy(SCRIPTS_DIR / 'auto-cpufreq-install.sh', '/usr/local/bin/auto-cpufreq-install')
-
-    print('\n* Deploy auto-cpufreq remove script')
-    copy(SCRIPTS_DIR / 'auto-cpufreq-remove.sh', '/usr/local/bin/auto-cpufreq-remove')
-
-    gnome_power_svc_disable()
-
-    run(['/usr/local/bin/auto-cpufreq-install'])
+    # prevent needless copying and system changes
+    pass
 
 # remove auto-cpufreq daemon
 def remove_daemon():
-    # check if auto-cpufreq is installed
-    if not os.path.exists('/usr/local/bin/auto-cpufreq-remove'):
-        print_error('auto-cpufreq daemon is not installed')
-        exit(1)
-
-    print_header('Removing auto-cpufreq daemon')
-
-    set_bluetooth_at_boot(True) # turn on bluetooth on boot
-
-    # output warning if gnome power profile is stopped
-    gnome_power_rm_reminder()
-    gnome_power_svc_enable()
-
-    # run auto-cpufreq daemon remove script
-    run(['/usr/local/bin/auto-cpufreq-remove'])
-
-    # remove auto-cpufreq-remove
-    os.remove('/usr/local/bin/auto-cpufreq-remove')
-
-    # delete override pickle if it exists
-    if os.path.isfile(GOVERNOR_OVERRIDE_FILE): os.remove(GOVERNOR_OVERRIDE_FILE)
-
-    # delete stats file
-    if auto_cpufreq_stats_path.exists():
-        if auto_cpufreq_stats_file is not None: auto_cpufreq_stats_file.close()
-        auto_cpufreq_stats_path.unlink()
-
-    # restore original cpufrectl script
-    cpufreqctl_restore()
+    pass
 
 # refresh countdown
 def countdown(s:int):
